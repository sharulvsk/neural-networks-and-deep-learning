import numpy as np
import matplotlib.pyplot as plt
import h5py
import scipy
from PIL import Image
from scipy import ndimage

# Load dataset utility function
def load_dataset():
    # (Assuming you have a valid implementation of lr_utils)
    # ...

# Sigmoid function
def sigmoid(z):
    return 1 / (1 + np.exp(-z))

# Parameter initialization
def initialize_with_zeros(dim):
    w = np.zeros([dim, 1])
    b = 0.0
    return w, b

# Forward and Backward Propagation
def propagate(w, b, X, Y):
    A = sigmoid(np.dot(w.T, X) + b)
    cost = -1/m * (np.dot(Y, np.log(A).T) + np.dot((1-Y), np.log(1 - A).T))
    dw = 1 / m * (np.dot(X, (A - Y).T))
    db = 1 / m * (np.sum(A - Y))
    return {"dw": dw, "db": db}, np.squeeze(cost)

# Optimization
def optimize(w, b, X, Y, num_iterations, learning_rate, print_cost=False):
    costs = []
    for i in range(num_iterations):
        grads, cost = propagate(w, b, X, Y)
        dw = grads["dw"]
        db = grads["db"]
        w = w - learning_rate * dw
        b = b - learning_rate * db
        if i % 100 == 0:
            costs.append(cost)
        if print_cost and i % 100 == 0:
            print("Cost after iteration %i: %f" % (i, cost))
    return {"w": w, "b": b}, grads, costs

# Prediction
def predict(w, b, X):
    A = sigmoid(np.dot(w.T, X) + b)
    Y_prediction = np.zeros((1, A.shape[1]))
    for i in range(A.shape[1]):
        Y_prediction[0, i] = 1 if A[0, i] > 0.5 else 0
    return Y_prediction

# Load the dataset
train_set_x_orig, train_set_y, test_set_x_orig, test_set_y, classes = load_dataset()

# Dataset Exploration
m_train = train_set_x_orig.shape[0]
m_test = test_set_x_orig.shape[0]
num_px = train_set_x_orig.shape[1]

print ("Number of training examples: m_train = " + str(m_train))
print ("Number of testing examples: m_test = " + str(m_test))
print ("Height/Width of each image: num_px = " + str(num_px))
print ("Each image is of size: (" + str(num_px) + ", " + str(num_px) + ", 3)")
print ("train_set_x shape: " + str(train_set_x_orig.shape))
print ("train_set_y shape: " + str(train_set_y.shape))
print ("test_set_x shape: " + str(test_set_x_orig.shape))
print ("test_set_y shape: " + str(test_set_y.shape))

# Reshape and Standardize the Data
train_set_x_flatten = train_set_x_orig.reshape(train_set_x_orig.shape[0], -1).T
test_set_x_flatten = test_set_x_orig.reshape(test_set_x_orig.shape[0], -1).T

train_set_x = train_set_x_flatten / 255.
test_set_x = test_set_x_flatten / 255.

# Initialize parameters
w, b = initialize_with_zeros(num_px * num_px * 3)

# Set hyperparameters
learning_rate = 0.01
num_iterations = 1500

# Train the model
parameters, grads, costs = optimize(w, b, train_set_x, train_set_y, num_iterations, learning_rate, print_cost=True)

# Make predictions
train_predictions = predict(parameters["w"], parameters["b"], train_set_x)
test_predictions = predict(parameters["w"], parameters["b"], test_set_x)

# Print accuracy
print("Train accuracy: {}%".format(100 - np.mean(np.abs(train_predictions - train_set_y)) * 100))
print("Test accuracy: {}%".format(100 - np.mean(np.abs(test_predictions - test_set_y)) * 100))

# Plot learning curve
plt.plot(costs)
plt.ylabel('Cost')
plt.xlabel('Iterations (per hundreds)')
plt.title('Learning Rate = ' + str(learning_rate))
plt.show()
